/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values DO NOT
exceed four million, find the sum of the even - valued terms.
*/

// //create a container to contain the terms that make up a fibonacci
// //start basic first, just get the first 10 terms in a fibo...
// let arr = [];
// // let limit = 377; //the 13th term;

//the modified fibo function that checks for limit

module.exports.fiboLimit = (limit) => {
    let arr1 = [];
    //push the first two terms into array 1:
    arr1.push(1); //the first term, the 0th element in the array i.e. i == 0;
    arr1.push(2);// the second term, the 1st element in the array i.e. i ==1;
    //set the while loop to begin at i ==2;
    let i = 2;
    let x = 0;
    //if the 'i-1'th term value is less than the limit, keep pushing 'i'th term into the array:
    while (arr1[i-1] < limit){
        x = arr1[i - 2] + arr1[i - 1];
        arr1.push(x);
        ++i;
    }
    /*check if the last term is more than the limit; and if it is remove that last term and return the modified array;
    else just return array */
    if(arr1[arr1.length-1]>limit){
        //remove the last term:
        arr1.splice(-1, 1);
        console.log(arr1);
        return arr1;
    }else{
        //return the entire arr1 without any modifications:
        console.log(arr1);
        return arr1;
    }
}

//now create a helper function that leverages on fiboLimit(limit) to sum up only the even-valued terms...

module.exports.getSumEvenTerms = (limit) => {
    let arrFiboLimit = this.fiboLimit(limit);
    const isEven = (value) => {
        if(value%2 === 0){
            return value;
        }
    }
    let arrEvenTerms = arrFiboLimit.filter(isEven);
    const getSumEvenTerms = arr => arr.reduce((a,b)=>a+b,0);
    let sum = getSumEvenTerms(arrEvenTerms);
    console.log(`The array for only even terms in a fibo sequence up to but excluding values that exceed ${limit} is: `, arrEvenTerms);
    console.log(`The sum of even terms in a fibo sequence up to but excluding values that exceed ${limit} is: `, sum);
    return sum;
    // return sum of arrEvenTerms;
}


// call the above by typing in mac terminal: node -e 'require("./2_even_fibonacci_numbers.js").fiboLimit(377)'


// // or initialise the function that lists out fibo sequence where it stops when there is a term with a value <= 377
// fiboLimit(377);


//generic fibo function here:
let arr2 = [];
module.exports.fibo = (number) =>{
    let i = 0;
    while(i<number){
        if (i===0){
            arr2.push(1);
        }else if(i===1){
            arr2.push(2);
        }
        else{
            let x = arr2[i - 2] + arr2[i - 1];
            arr2.push(x);
        }
        ++i;
    }
    console.log(arr2);
    return arr2;
}
//call the above by typing in mac terminal: node -e 'require("./2_even_fibonacci_numbers.js").fibo(11)'
// fibo(10);


//for values of fibo that do not exceed 4 million;
// console.log(fibo(4000000));


// const factorial = (number) => {
//     if (number <= 0) { // terminal case
//         return 1;
//     } else { // block to execute
//         return (number * factorial(number - 1));
//     }
// };
// console.log(factorial(6));
// // 720

